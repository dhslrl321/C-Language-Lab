# 구조체

- Primitive Data type 들을 모아 abstract data type 을 정의
  - java 의 class 와 비슷한 느낌
  - struct -> class 로 진화함
- 3가지 정의 방식
  1. `struct` 로 정의하기 : 변수 생성할 때 struct 키워드를 명시해야함
  2. `typedef struct 구조체 이름` : 구조체 생성할 때 alias 를 이용하므로 변수 생성할 때 struct 를 명시하지 않아도됨
  3. `typedef struct` : 익명 구조체로 구조체 이름을 생략하고 바로 alias 로 지정할 수 있음

```c
// 정의 방식 1
struct Student {
    int id;
    char *name;
    double score;
};

// 정의 방식 2
typedef struct Professor_s {
    int id;
    char *name;
    char major[20];
} Professor;

// 정의 방식 3
typedef struct {
    int id;
    char *name;
    char major[20];
} Researcher;
```

- 2가지 할당 방식
  1. 생성과 동시에 할당 `Student = { "", "", ""}` 와 같은 형태로 인자의 순서에 따라 구조체 변수에 적용됨
  2. 항목 연산자 `.`와 대입 연산자 `=` 를 이용해서 할당

```c
#include <stdio.h>
#include <string.h>

struct Student {
    int id;
    char *name;
    double score;
};

typedef struct {
    int id;
    char *name;
    char major[20];
} Professor;

int main() {

    /*
    * 1. struct 명시
    * 2. 변수 생성과 동시에 초기화
    */
    struct Student student = {21, "장O익", 4.5};

    /*
    * 1. struct 키워드 무시
    * 2. 항목 연산자 . 를 이용하여 할당
    */
    Professor professor;

    professor.id = 21;
    professor.name = "장O익";
    strcpy(professor.major, "정보보안");

    return 0;
}
```

# 주의 사항

- 구조체에 char 배열, 즉 문자열이 존재할 때, 항목 연산자와 대입 연산자로 바로 넣으면 안됨
  - strcpy() 사용
