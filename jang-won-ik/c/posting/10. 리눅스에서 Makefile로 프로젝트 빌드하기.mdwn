우리가 프론트엔드 개발이나 백엔드 개발을 할 때, 빌드 도구를 사용하여 개발을 하곤 한다.

이런 빌드 도구 덕분에 쉽게 의존성을 관리하고 빌드를 할 수 있는데, C 언어도 이러한 빌드 도구를 사용할 수 있다.

그 빌드 도구가 바로 **make** 이다.

# 빌드 도구, make

make 는 Linux와 같은 _유닉스 계열_ 운영체제에서 사용되는 **빌드 도구**(Build Tool) 이다.

빌드 도구란 간단히 설명하자면,

#### 소스 코드를 **컴파일 테스트, 정적 분석**을 위해 실행 가능한 애플리케이션으로 **자동 생성**해주는 프로그램, 일종의 소프트웨어를 의미한다.

대표적인 빌드 도구로는 Ant 나 Maven, Gradle, NPM 이 존재한다.

[##_Image|kage@d6w8D6/btq9IDiHkiC/EvxrCcaI5u4kj3yN4eojI0/img.png|alignCenter|data-origin-width="692" data-origin-height="323" width="628" height="293" data-ke-mobilestyle="widthOrigin"|||_##]

이런 빌드 도구를 사용한다면 여러 파일들끼리의 의존성과 각 파일에 필요한 명령을 정의해서 쉽게 컴파일이 가능해 진다.

우리는 **make** 를 이용해서 리눅스에서 쉽게 애플리케이션을 만들 수 있다.

make 에서는 빌드를 하기 위해서 **make 구조로 짜여진 파일을 make가 해석하도록** 만들면 되는데, 그 대표적인 것이 바로 **Makefile** 이다.

# Makefile 이란?

Makefile 은 **make** 를 실행해서 빌드하기 전에 **컴파일 규칙 및 링크 규칙**을 만드는 명세 파일 이다.

npm 의 `application.json` 이나 gradle 의 `build.gradle` 과 같이 **make 도 역시 고유한 빌드 문법** 이 존재한다.

**make** 는 이러한 쉘 명령을 조건에 따라 기술된 Makefile 을 분석하고 실행하는 역할을 수행한다.

## Makefile 의 문법

Makefile 은 다양한 빌드를 위해 여러 문법을 제공하는데, 가장 대표적인 문법으로는 다음과 같은 3가지가 있다.

```bash
TARGET []: PREREQUISITES []
  RECIPE
  []
```

- TARGET
  - 실행 가능한 타겟 파일, object 파일
- PREREQUISITES
  - TARGET 을 만들 때 필요한 의존 관계를 명시한다
- RECIPE
  - TARGET 을 만들기 위한 실행 파일 및 명령어를 명시한다.
  - 탭으로 구분하고 스페이스를 넣으면 동작하지 않는다.
  - 주로 cc나 리눅스 명령어를 사용한다

# **make 로 Makefile 에 명시된 c 소스 빌드하기**

> 해당 실습을 따라하기 위해서는 **컴파일(Compile) 과 링킹(Linking) 에 대한** 이해가 있어야 합니다. 해당 블로그의 [gcc 로 c 언어로 작성된 소스 코드 컴파일하기](https://wonit.tistory.com/546#comment12685164) 를 참고하세요!

다음과 같은 파일이 존재한다고 가정해보자.

```bash
$ tree
.
└── src
    ├── main.c
    ├── hello.h
    ├── hello.c
    ├── bye.h
    ├── bye.c
    └── Makefile
```

main 함수에서는 `hello.c` 와 `bye.c` 에서 정의한 인사말 출력하는 함수를 호출하고, 각각의 파일에는 다음과 같이 소스가 정의되어 있다.

### 구현하기

**main 함수 생성 및 구현하기**

```c
#include <stdio.h>
#include "hello.h"

int main() {

  say_hello();
  say_bye();

  return 0;
}
```

**header 파일 생성 및 구현하기**

```c
// hello.h
void say_hello():

// hello.c
#include <stdio.h>
#include "hello.h"

void say_hello() {
  printf("(hello.h) => 안녕하세요! \n");
}

// bye.c
#include <stdio.h>
#include "bye.h"

void say_bye() {
  printf("(bye.h) => 안녕히 가세요! \n");
}
```

## Makefile 정의하기

이제 build 를 위한 Makefile 을 정의해보도록 하자.

그 전에!

#### gcc 를 이용해서 빌드를 하는 과정을 잠시 보자.

각각의 c 파일을 통해서 object 파일을 만들고

```bash
$ gcc -c main.c # main.o 파일 생성
$ gcc -c hello.c # hello.o 파일 생성
$ gcc -c bye.c # bye.o 파일 생성

$ gcc main.o hello.o bye.o -o Greeting # 각각의 Object 파일 링킹을 통해 Greeting 이라는 exe 파일 생성
```

Makefile 을 작성하는 과정은 위의 과정과 정확히 동일하다.

Makefile 이 하는 일은 위와 같이 터미널에서 빌드 옵션과 링킹을 **하나의 파일** 에서 할 수 있도록 하는 것이다.

##### docker-compose 와 비슷한 느낌이다

이제 위의 수동 컴파일을 토대로 Makefile 을 만들어보자.

```bash
hello.o : hello.h hello.c
  gcc -c hello.c

bye.o : bye.h bye.c
  gcc -c bye.c

main.o : main.c hello.h bye.h
  gcc -c main.c

Greeting : hello.o bye.o main.o
  gcc hello.h bye.h main.o -o Greeting
```

그리고 make 명령어를 통해서 빌드를 수행해보자.

```bash
$ make Greeting

gcc -c hello.c
gcc -c bye.c
gcc -c main.c
gcc hello.o bye.o main.o -o Greeting
```

이렇게 자동으로 빌드를 수행하게 된다.

그리고 ls 명령을 통해서 잘 컴파일이 완료되었는지 확인하기 위해 ls 명령을 수행해보자

```bash
$ ls

main.c   main.o   hello.h   hello.c   hello.o   bye.h   bye.c   bye.o   Greeting
```

그럼 우리가 생성하기로 한 Greeting 파일이 잘 만들어진 것을 볼 수 있다.

#### 실행시켜보자!

```bash
$ ./Greeting

(hello.h) => 안녕하세요!
(bye.h) => 안녕히 가세요!
```
