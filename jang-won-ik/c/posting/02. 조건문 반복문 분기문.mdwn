[##_Image|kage@woxWE/btq7SMNlXab/bzNouN2jeIS0xf46Eeb0R0/img.png|alignCenter|data-origin-width="960" data-origin-height="496" width="641" height="331" data-ke-mobilestyle="widthOrigin"|||_##]

# Conditional Statements, 조건문

조건문은 다음과 같은 상황에 사용된다.

[##_Image|kage@lHkMn/btq7VzUGAu1/qsqA0Q2LBwPaQ9V1yU07m0/img.png|alignCenter|data-origin-width="730" data-origin-height="486" width="502" height="334" data-ke-mobilestyle="widthOrigin"|||_##]

#### 사용자의 입력 혹은 특정 값을 **일정 조건에 따라 다르게 처리**할 때 사용된다.

그럴 때 대부분의 프로그래밍 언어에서는 `if, else` 문을 사용하곤 한다.

## if statements

위의 그림을 if 조건문을 이용해서 바꿔보도록 하자.

```c
#include <stdio.h>

int main() {
    printf("몇 학년인가? \n");

    int grade = 0;
    scanf("%d", &grade);

    if(grade == 3) {
        printf("3 학년 학생입니다.");
    }else if(grade == 4) {
        char sexuality;

        printf("남성 : 'm' \t 여성 : 'f'\n");
        scanf(" %c", &sexuality);

        if(sexuality == 'm' && grade == 4) {
            printf("4 학년의 남성 학생");
        }else if(sexuality == 'f' && grade == 4) {
            printf("4 학년의 여성 학생");
        }else {
            printf("입력이 잘못 되었습니다.");
        }
    }else {
        printf("대상 학년이 아닙니다.");
    }
}
```

여기서 주의해야할 사항이 있다.

15번째 줄에서 scanf 로 데이터를 입력받는다.

하지만 앞에 공백 문자 하나가 존재한다.

이 이유는 14번째 줄에 존재하는 `\n` 이스케이프 시퀀스 때문에 `%c` 가 이미 값이 들어가버리게 된다.

그래서 공백을 이용해서 한 칸을 띄워준 것이다.

# Switch Statements, 분기문

[##_Image|kage@cXRfUm/btq7RK4v5Rs/LrTwQKxpSr6lntIsLFIw4k/img.png|alignCenter|data-origin-width="1208" data-origin-height="258" data-ke-mobilestyle="widthOrigin"|||_##]

분기문 (Switch Case) 은 조건문과 비슷한 특성을 가지고 있다.

#### 분기문 또한 조건문과 같이 사용자의 입력이나 특정 값을 **일정 조건에 따라 다르게 처리**할 때 사용된다.

Switch Case 문을 사용할 때는 2가지의 사용에 유의해야 한다.

1. if 문의 else에 해당하는 것이 바로 **default** 블록이다.
2. 각각의 case 가 종료될 때는 **break**를 꼭 써줘야 한다.

만약 break를 사용하지 않으면 다음 조건까지 함께 포함하는데, 이를 이용해서 `||` 로직을 구현할 수 있다.

```c
#include <stdio.h>

int main() {

    int grade;

    printf("학년을 입력하세요\n");
    scanf(" %d", &grade);

    switch(grade) {
        case 1: {
            printf("1학년 학생입니다.");
            break;
        }
        case 2: {
            printf("2학년 학생입니다.");
            break;
        }
        case 3: {
            printf("3학년 학생입니다.");
            break;
        }
        case 4: {
            printf("4학년 학생입니다.");
            break;
        }
        case 5:
        case 6: {
            printf("졸업 예정 학생입니다");
            break;
        }
        default: {
            printf("졸업생 입니다.");
            break;
        }
    }
}
```

그럼 If와 Switch는 서로 동일한 기능을 수행하는데, 모두 똑같을까?

아니다. 가장 큰 차이점이라고 한다면 바로 **Jump** 의 차이이다.

if 문에서는 조건이 만족하는지 판단하기 위해서 각각의 조건 branch 를 거쳐야 하는 반면 switch 문에서는 특정 위치로 jump 하게 되어 **성능상 조금의 이점이 존재**한다.

하지만 여러 디자인 패턴에서 맹목적인 Switch Case 는 Anti Pattern 이므로 사용시 주의하도록 해야한다.

# Loop Statements, 반복문

반복문에는 2가지의 사용이 존재한다.

1. for문
2. while 과 do-while 문

가장 유명한 구구단을 한 번 짜보도록 하자

[##_Image|kage@bK3v1q/btq7Uz2i2BL/7gCk7gQ2XM7defs4ZaPrK0/img.png|alignCenter|data-origin-width="552" data-origin-height="346" data-ke-mobilestyle="widthOrigin"|||_##]

(feat. 주상욱의 GuguClass)

## for statements

[##_Image|kage@d8hiQT/btq7RLboaro/HmUsMqBT2NZDvzM4O0O4eK/img.png|alignCenter|data-origin-width="508" data-origin-height="234" data-ke-mobilestyle="widthOrigin"|||_##]

```c
#include <stdio.h>

int main() {
	int i;
	int num;

	printf("몇 단을 출력하시겠습니까?");

	scanf("%d", &num);

	for (i = 1; i <=9; i++) {
		printf("\n %d * %d = %d", num, i ,i * num);
	}
	return 0;
}
```

## while statements

[##_Image|kage@bukOKl/btq7PSBYIUt/6TujRwZLxS88kx8Av5Oskk/img.png|alignCenter|data-origin-width="462" data-origin-height="197" data-ke-mobilestyle="widthOrigin"|||_##]

```c
#include <stdio.h>

int main() {
	int i = 1;
	int num;

  printf("몇 단을 출력하시겠습니까?");

	scanf("%d", &num);

	while (i <=9) {
    printf("\n %d * %d = %d", num, i ,i * num);
		i++;
	}
	return 0;
}
```

## do-while statements

[##_Image|kage@bBJBJV/btq7Qbg16aP/2sC7VpKPmfIsv98jmAiRWk/img.png|alignCenter|data-origin-width="422" data-origin-height="215" data-ke-mobilestyle="widthOrigin"|||_##]

```c
#include <stdio.h>

int main() {
	int i = 1;
	int num;

  printf("몇 단을 출력하시겠습니까?");

	scanf("%d", &num);

	do {
    printf("\n %d * %d = %d", num, i ,i * num);
		i++;
	} while (i <=9);
	return 0;
}
```
