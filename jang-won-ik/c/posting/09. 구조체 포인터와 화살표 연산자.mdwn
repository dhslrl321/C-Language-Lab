[##_Image|kage@woxWE/btq7SMNlXab/bzNouN2jeIS0xf46Eeb0R0/img.png|alignCenter|data-origin-width="960" data-origin-height="496" width="641" height="331" data-ke-mobilestyle="widthOrigin"|||_##]

# 구조체 포인터

지난 시간 우리는 구조체에 대해서 간단하게 알아보았다.

이번 시간에는 구조체를 조금 더 효율적으로 쓸 수 있는 방법에 대해서 알아보도록 하자.

지난 시간에 이야기한 구조체에 대해서 한 줄로 정리하자면 다음과 같을 것이다.

#### 구조체는 여러 자료형이 모여 하나의 큰 사용자 정의 자료형을 구성하는 것

여기서 우리가 생각해볼만한 주제가 바로 **큰 자료형이 된다는 것**이다.

구조체는 대부분 일반 자료형보다 크기가 크기 때문에 이를 잘 관리하는 것이 중요하다

이를 이해하기 위해서 지난 시간에 이야기 한 **메모리 구조**에 대해서 다시 한 번 상기해보자.

[##_Image|kage@vVYO9/btq8HUzcwv3/3NOAe6v6ENMO2E7Z3MNSkK/img.png|alignCenter|data-origin-width="508" data-origin-height="555" width="477" height="521" data-ke-mobilestyle="widthOrigin"|||_##]

우리가 구조체를 정의한다는 것은 어떤 의미일까?

#### 바로 Stack 영역에 구조체의 크기만큼 공간을 할당받는 것이다.

그럼 여러 개의 구조체가 필요한 상황에서 구조체마다 각각 할당을 받아버리면 Stack 영역은 꽉 차버리는 상황이 발생한다.

그래서 구조체는 **임의로 우리가 메모리 공간을 Heap 영역에 할당**받고 다 사용하면 `free()` 함수로 메모리 해제를 시키는게 최적화 부분에서 좋은 점수를 받을 수 있다.

이제 실전으로 들어가보자

# 구조체 포인터를 선언하고 메모리 할당하기

구조체 포인터를 생성할 때는 일반 포인터 변수를 생성할 때와 동일하게 `*` 참조 연산자를 생성 시에 변수명 앞에 위치시키면 된다.

그리고 우리는 Heap 영역에 우리가 필요한 만큼, 구조체의 크기만큼 생성을 할 것이니 malloc 으로 구조체 크기만큼 size를 지정해서 생성과 할당을 진행할 수 있다.

- `struct 구조체_이름 *포인터_이름 = malloc(sizeof(struct 구조체_이름));`

# 화살표 연산

위에서 생성과 할당을 했으니 실질적으로 구조체 포인터가 가리키는 주소에 데이터를 추가해야 한다.

#### 구조체 포인터가 가리키는 주소에 데이터를 할당하기 위해 **화살표 연산**을 사용한다.

화살표 연산은 **구조체 포인터 안의 변수**에, 즉 멤버 변수에 쉽게 접근할 수 있도록 한다.

- `포인터_이름 -> 멤버변수_이름 = 값`

형태로 사용할 수 있다.

> 만약 화살표 연산자를 이용하지 않을 경우에는 **괄호와 역참조**를 이용해서도 할당할 수 있다. `(*포인터_이름).멤버변수 = 값`

이제 실제 코드를 확인해보자.

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int age;
    char name[];
} Student;

int main() {
    Student *pointer = malloc(sizeof(Student));

    pointer -> age = 25;
    strcpy(pointer -> name, "장원익");

    printf("이름: %s \n", pointer -> name);
    printf("나이: %d", pointer -> age);

    free(pointer);

    return 0;
}
```

malloc 으로 메모리를 할당했다면 마지막에 free로 메모리를 해제시키는 것도 잊지 말자
