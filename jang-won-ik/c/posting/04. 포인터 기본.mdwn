[##_Image|kage@woxWE/btq7SMNlXab/bzNouN2jeIS0xf46Eeb0R0/img.png|alignCenter|data-origin-width="960" data-origin-height="496" width="641" height="331" data-ke-mobilestyle="widthOrigin"|||_##]

# C 언어의 포인터

아직까지 많은 사람들에게 C 언어는 사랑받고 있고, 그의 객체지향인 C++ 또한 사랑받고 있으며 프로그래밍에 있어서 필수적인 Unmanaged Languaged 라고 평가받는다.

그 이유는 현대의 언어 중 가장 **어셈블리와 근접**해서가 아닐까 싶은 생각이고 그 주역이 바로 **포인터** 이다.

그럼 포인터는 무엇일까?

#### 포인터는 메모리의 주소값을 지정할 수 있는 **무언가** 쯤으로 생각하자

예를 들어 다음과 같은 코드가 존재한다고 가정해보자

```c
#include <stdio.h>

int main() {
    int number = 100;

    return 0;
}
```

그러면 메모리 **0x22** 주소에 4 byte 의 공간이 할당된다.

[##_Image|kage@oMm9O/btq8GaHtd5F/AewKm3UYxjUCXZmk2wT1IK/img.png|alignCenter|data-origin-width="357" data-origin-height="200" data-ke-mobilestyle="widthOrigin"|||_##]

그러면 우리는 해당 주소로 접근을 하기 위해서는 `number` 이라는 변수를 **직접 조작**해야 한다.

하지만 여기서 **포인터가 있다면 포인터 변수 만으로 해당 주소 공간을 조작할 수 있게 된다.**

# 포인터 변수

포인터 변수는 말 그대로 포인터, 즉 **메모리의 주소 값**을 저장할 수 있는 변수이다.

우리가 주소값을 저장하기 위해서는 2가지 연산자를 알아야 한다.

1. 참조 연산자 (`*`)
2. 주소 연산자 (`*`)

### 참조 연산자

참조 연산자는 **포인터의 이름이나 주소 앞에 사용해서 포인터가 가리키는 주소에 지정된 값을 반환**하는 역할을 수행한다.

참조연산자는 2가지로 사용될 수 있는데, **변수 생성 시에 사용**되면 포인터 변수를 할당한다는 것이고 **일반 연산에 사용**되면 포인터가 가리키는 값을 반환 하는 역할을 한다.

- 참조 연산자의 사용 위치
  - 변수 생성 시
    - **포인터 변수 생성**
  - 일반 연산 시
    - **포인터가 가리키는 값을 반환**

포인터 변수를 선언하기 위해서는 `*` 이라는 참조 연산자를 이용하며 일반 변수와 같이 생성한다.

코드로 보자면

```c
#include <stdio.h>

int main() {
    int number = 100;

    int *pointer; // 변수 생성 시에 사용되었으니 포인터 변수 할당

    printf("%d", *pointer); // 일반 라인에서 사용되었으니 포인터가 가리키는 데이터 값을 반환

    return 0;
}
```

그럼 `number` 라는 변수가 존재하는 주소를 어떻게 `pointer` 변수에 할당할까?

### 주소 연산자

주소 연산자는 변수의 이름 앞에서 상ㅇ되며 **해당 변수의 주소값을 반환**하는 역할을 수행한다.

바로 `&` 연산자를 이용하면 된다.

그럼 우리는 number 라는 변수의 주소를 pointer 라는 변수에 할당할 것이므로 다음과 같은 코드를 만들어낼 수 있다.

```c
#include <stdio.h>

int main() {
    int number = 100;

    int *pointer = &number;

    return 0;
}
```

#### 그럼 결국 `pointer` 라는 포인터 변수에 `number` 의 주소 값이 할당되어 다음과 같은 상황이 된다.

[##_Image|kage@ehIxzA/btq8GCwUrWF/VWE4glcG3K0omyj2oVDPtK/img.png|alignCenter|data-origin-width="360" data-origin-height="446" data-ke-mobilestyle="widthOrigin"|||_##]

그럼 다음과 같은 연산이 가능해 질 것이다.

```c
#include <stdio.h>
#include <assert.h>

int main() {
    int number = 16;

    int *pointer = &number; // number 변수의 주소값 저장

    assert(&number == pointer);
    assert(number == *pointer);
    assert(&number !== &pointer);

    printf("테스트 성공");

    return 0;
}
```

# 정리하자면

포인터 변수는 **꼭 주소값**이 할당되어야 한다.

주소 값을 할당하기 위해서는 **주소 연산자**를 통해서 특정 변수의 주소 값을 반환받아 포인터 변수에 할당해야 한다.

### 포인터란?

- 번지에 대한 기호화된 표현
  - 포인터 == 주소값

### 포인터 변수란?

- 포인터 == 메모리의 주소값
- 포인터 변수 == 포인터를 저장하는 변수
  - 주소 값이 들어가는 변수

### 포인터 변수 정의

- `int *p;` 와 같은 형태로 정의
  - 즉 p는 int 형 데이터 타입이 저장되는 주소를 저장할 수 있는 변수임

### `&` 연산자

- 포인터 변수에 값을 할당하기 위해서는 **오로지 주소 값만 가능**
- `&` 연산자는 데이터의 주소를 확인하기 위해서 사용됨
  - 어떤 변수가 저장된 메모리 주소의 선두 번지

### `*` 연산자와 `&` 연산자의 관계

- `&` 특정한 변순의 선두 번지
- `*` 연산자는 포인터 변수에 저장된 선두 번지를 참조해 저장된 값

### `*` 의 사용 위치에 따른 역할

- 정의될 때 사용
  - 참조 연산자
  - 메모리 주소를 저장할 수 있는 변수 할당
- 수식에서 사용
  - 역참조 연산자
  - 변수에 대한 역참조
  - dereferencing
