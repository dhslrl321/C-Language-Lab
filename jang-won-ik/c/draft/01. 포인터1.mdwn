# 포인터란?

- 번지에 대한 기호화된 표현
  - 포인터 == 주소값

# 포인터 변수란?

- 포인터 == 메모리의 주소값
- 포인터 변수 == 포인터를 저장하는 변수
  - 주소 값이 들어가는 변수

# 포인터 변수 정의

- `int *p;` 와 같은 형태로 정의
  - 즉 p는 int 형 데이터 타입이 저장되는 주소를 저장할 수 있는 변수임

# `&` 연산자

- 포인터 변수에 값을 할당하기 위해서는 **오로지 주소 값만 가능**
- `&` 연산자는 데이터의 주소를 확인하기 위해서 사용됨
  - 어떤 변수가 저장된 메모리 주소의 선두 번지

```c
#include <stdio.h>
int main() {
    int number = 10;

    printf("%#010x", &number);
}
```

- 10 이라는 데이터가 저장되어 있는 number 변수가 할당된 주소 값을 출력

# `&` 연산자로 포인터 변수의 값 할당하기

```c
#include <stdio.h>
#include <assert.h>

int main() {
    int number = 10;
    int *pointer = &number;

    assert(pointer == number);
}
```

# `*` 연산자와 `&` 연산자의 관계

- `&` 특정한 변순의 선두 번지
- `*` 연산자는 포인터 변수에 저장된 선두 번지를 참조해 저장된 값

# `*` 의 사용 위치에 따른 역할

- 정의될 때 사용
  - 참조 연산자
  - 메모리 주소를 저장할 수 있는 변수 할당
- 수식에서 사용
  - 역참조 연산자
  - 변수에 대한 역참조
  - dereferencing

```c
#include <stdio.h>
#include <assert.h>

int main() {
    int number = 10;
    int *pointer = &number;

    *pointer = 20;

    assert(number == 20);
    assert(number == *pointer);
}
```

# Segmentation Fault 에러

- 초기화 되지 않은 포인터 변수에 역참조를 이용해서 새로운 값을 할당하려 할 때
  - 만약 초기화를 안 하면 쓰래기 값(랜덤한 주소)에 새로운 값을 할당하려 하기 때문에 이미 다른 시스템이 점유중이면 큰일나므로 에러를 방출

# 왜 포인터 변수에 타입을 지정하는가?

-
