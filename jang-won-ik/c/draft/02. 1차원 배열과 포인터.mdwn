# 1차원 배열과 포인터

- 배열을 포인터 변수에 할당하는 코드

```c
#include <assert.h>

int main() {
    int arr[] = {1, 2, 3, 4};

    int *pointer = arr;

    assert(&arr == pointer);

    assert(&arr[0] == pointer);
}
```

- 포인터 변수에 arr의 주소를 할당하는 코드
- 2 가지 특징이 존재
  1. 배열명은 배열의 주소
  2. 배열명은 배열의 첫번째 배열 요소의 주소를 뜻함

# 포인터 + 정수

- `pointer + 1` 는 pointer 가 가리키고 있는 배열의 다음 요소의 주소
- `*(pointer + 1)` 은 pointer 가 가리키고 있는 배열의 다음 요소

```c
#include <assert.h>

int main() {
    int arr[] = {11, 22, 33, 44};

    int *pointer = arr;

    assert(&arr[0] == (pointer + 0)); // pointer 가 가리키고 있는 인덱스 + 0 번째의 주소
    assert(arr[0] == *(pointer + 0)); // pointer 가 가리키고 있는 인덱스 + 0 번째 주소에 담긴 실제 값

    assert(&arr[1] == (pointer + 1));
    assert(arr[1] == *(pointer + 1));

    assert(&arr[2] == (pointer + 2));
    assert(arr[2] == *(pointer + 2));

    assert(&arr[3] == (pointer + 3));
    assert(arr[3] == *(pointer + 3));
}
```
