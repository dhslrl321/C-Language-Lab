[##_Image|kage@woxWE/btq7SMNlXab/bzNouN2jeIS0xf46Eeb0R0/img.png|alignCenter|data-origin-width="960" data-origin-height="496" width="641" height="331" data-ke-mobilestyle="widthOrigin"|||_##]

# 배열과 포인터의 관계

포인터와 배열은 매우 긴밀한 관계를 갖고 있다고 여러 서적 및 자료에서 이야기 한다.

어떤 부분에서는 배열이 **포인터를 대체**하기도 하고 혹은 **포인터가 배열을 대체**하기도 한다.

배열을 배울 때 우리는 다음과 같은 내용을 알 수 있었다.

#### 배열의 이름(변수명)은 해당 배열의 **주소**임과 동시에 첫 번째 요소의 **주소 값** 이다!

앞선 시간에 포인터에서는 또 이런 내용을 알 수 있었다.

#### 포인터 변수에 올 수 있는 값은 오로지 **주소 값**!

그럼 다음 코드가 동작할까?

```c
#include <assert.h>

int main() {
    int arr[] = {11, 22, 33, 44};

    int *pointer = arr;

    return 0;
}
```

그렇다 위의 코드는 전혀 문제가 없는 코드이며 잘 동작할 것이다.

[##_Image|kage@53Y25/btq8G56NiSF/gtReRI9YQrwtkOkUhd5Q20/img.png|alignCenter|data-origin-width="712" data-origin-height="840" width="444" height="524" data-ke-mobilestyle="widthOrigin"|||_##]

아마 메모리 어딘가에 위와 같은 형태로 존재할 것이며 이게 바로 배열을 포인터 변수에 저장하는 방법이다.

# 포인터로 배열 요소 접근하기

배열에서 특정 요소에 접근하기 위해서는 **인덱스**를 이용하는 방법이 가장 흔하다.

하지만 **포인터를 이용한다면 포인터와 정수를 적절히 조작하여 접근** 하는 방식도 존재한다.

그 방법에 대해서 알아보기 위해 다음 코드를 알아보자.

```c
#include <stdio.h>

int main() {
    int arr[] = {11, 22, 33, 44};

    int *pointer = arr;

    printf("%010x", pointer + 0);
    printf("%010x", pointer + 1);
    printf("%010x", pointer + 2);
    printf("%010x", pointer + 3);

    return 0;
}
```

위의 코드에서 `pointer + 1` 이 의미하는 것은 무엇일까?

## (pointer + 정수) 의 의미

pointer 변수에 정수를 더한다는 것은 포인터 변수의 데이터 타입만큼의 byte 를 더한다는 의미가 된다.

이 말은 무엇이냐?

즉 다음과 같다는 소리이다.

- pointer + 0
  - pointer 변수가 가리키고 있는 주소 값에 **0byte** 만큼을 더한 주소
- pointer + 1
  - pointer 변수가 가리키고 있는 주소 값에 **4byte** 만큼을 더한 주소
- pointer + 2
  - pointer 변수가 가리키고 있는 주소 값에 **8byte** 만큼을 더한 주소

왜 4 바이트씩 증가할까?

이유는 바로 pointer 변수가 할당된 데이터 타입이 integer 타입이라 그렇다.

그럼 위의 코드는 다음과 같은 형태의 메모리 구조를 갖게 된다

[##_Image|kage@UVSr2/btq8HHLqbT0/ZrNgEa5tmAuI1pJaZfgau0/img.png|alignCenter|data-origin-width="760" data-origin-height="1036" width="462" height="630" data-ke-mobilestyle="widthOrigin"|||_##]

# 포인터로 접근한 배열 요소의 값 가져오기

지난 시간에 포인터를 이용할 때 사용하는 **참조 연산자** `*` 에 대해서 알아보았다.

참조 연산자가 만약 변수명 앞에 사용된다면 **해당 메모리에 존재하는 값을 반환** 한다고 했으니 우리는 참조 연산자를 이용해서 배열의 모든 값을 취할 수 있게 되었다.
