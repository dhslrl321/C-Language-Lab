[##_Image|kage@woxWE/btq7SMNlXab/bzNouN2jeIS0xf46Eeb0R0/img.png|alignCenter|data-origin-width="960" data-origin-height="496" width="641" height="331" data-ke-mobilestyle="widthOrigin"|||_##]

# 배열

CS 분야에서 배열은 가장 **기본적인 자료구조**이다.

#### 배열은 같은 데이터 타입의 데이터들이 **순차적으로** 저장되는 자료구조이다. 즉 메모리 주소가 연속되어야 한다.

메모리 주소가 연속되어야 한다는 특성 때문에 **임의로 배열의 크기를 늘리거나 줄이는 것이 불가능** 하다는 특성이 존재한다.

그래서 만약 배열의 크기가 늘어나야할 때는 **새로운 배열을 만들고 기존 내용을 복사**하는 형태로 사용하곤 한다.

이렇게만 본다면 배열이 안 좋아보일 수 있다. 자료구조에 등장하는 **연결 리스트**가 더 좋아보일 수 있지만 모든 상황에서 배열이 안 좋은 것은 아니다.

배열은 index 값을 토대로 원소에 접근하기 때문에 탐색에서의 시간 복잡도가 `O(1)` 으로 상수 시간이 든다.

그래서 간단한 곳에서 자주 사용된다.

# C 언어에서의 배열

C 언어 에서 배열은 **기본 자료형**으로 제공된다.

앞서 이야기했듯 배열은 **고정된 크기의 연속된 메모리**라고 했었다.

그럼 이런 배열이 왜 사용될지 생각해봐야 한다.

만약 다음과 같이 동일한 데이터 타입의 데이터를 관리해야 한다면 어떻게 해야할까?

```c
int student1, student2, student3, student4, student5, student6;

student1 = 88;
student2 = 89;
student3 = 73;
student4 = 65;
student5 = 99;
student6 = 100;
```

학점을 저장해야 한다고 가정했을 때 위와 같은 방식은 매우 비효율적이다.

동일한 데이터 타입인 **int 형 데이터인 학점**을 **배열을 이용한다면 매우 편리하게** 관리할 수 있다.

```c
int student[] = {88, 89, 73, 65, 99, 100};

// 혹은 다음과 같이 할당하는 것도 가능하다
int teacher[6];

teacher[0] = 88;
teacher[1] = 89;
teacher[2] = 73;
teacher[3] = 65;
teacher[4] = 99;
teacher[5] = 100;
```

# 배열의 인덱스

만약 배열의 특정 순서의 값을 얻고싶을 때는 어떻게 할까?

즉, 3번째에 위치한 값을 가져오고싶을 때는 **인덱스**를 이용할 수 있다.

#### 배열의 인덱스란 배열에 저장된 데이터의 순서 번호를 의미한다.

우리는 배열의 인덱스를 이용해서 배열의 특정 값에 접근할 수 있다.

기본적인 사용 방법은 다음과 같다.

```c
#include <assert.h>

int main() {
    int student[] = {88, 89, 73, 65, 99, 100};

    assert(student[0] == 88); // 첫 번째 원소 0
    assert(student[3] == 65); // n 번째 원소 (찾으려는 원소 순서 - 1)
    assert(student[5] == 100); // 마지막 원소 (배열 길이 - 1)
}
```

배열은 0 번째 인덱스 부터 시작한다.

이에 대한 자세한 사항은 메모리와 관련되어 있는데, **다음 포인터** 포스팅에서 나오므로 잠시 넘어가도록 하자.

위의 규칙을 보면 다음과 같은 특징을 알 수 있다.

#### 배열에서 특정 원소의 위치(n 번째) 의 값을 얻기 위해서는 n-1 번째 인덱스에 접근하면 된다!
